- class_name = commentable.class.name.downcase
.comment#comment_new{ highlightable(:comment_new_tools, :off => "#f2f2f2") }

  -# Two hidden fields store the IDs of notes and emails shown for the asset. These IDs are used
  -# by [Expand/Collapse All]. The contents gets updated by actions such as [Add] or [Delete].
  = hidden_field_tag :shown_notes, "#{commentable.comment_ids.join(',')}"
  = hidden_field_tag :shown_emails, "#{commentable.email_ids.join(',')}"

  = link_to avatar_for(@current_user, :size => "25x25"), user_path(@current_user)
  .tools#comment_new_tools{ invisible }
    = link_to_function("Expand All", "crm.flip_notes_and_emails('Expanded', 'More...', 'Less...')") << " | "
    = link_to_function("Collapse All", "crm.flip_notes_and_emails('Collapsed', 'More...', 'Less...')")

  #post{ hidden_if(session["#{class_name}_new_comment"].nil?) }
    = form_for(@comment, :remote => true) do |f|
      = hidden_field_tag "comment[user_id]", @current_user.id
      = hidden_field_tag "comment[commentable_id]", commentable.id
      = hidden_field_tag "comment[commentable_type]", class_name.capitalize
      = f.text_area :comment
      %div{:style => "padding:6px 0px 0px 40px;"}
        = f.submit t(:add_note)
        #{t :or}
        = link_to_remote(t(:cancel), :url => new_comment_path("#{class_name}_id" => commentable), :method => :get, :with => "'cancel=true'")
  #ask{ hidden_if(session["#{class_name}_new_comment"])}
    = text_field_tag :post_new_note, t(:add_note_help), :onclick => remote_function(:url => new_comment_path("#{class_name}_id" => commentable), :method => :get)
